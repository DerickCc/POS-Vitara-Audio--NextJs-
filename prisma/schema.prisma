generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Users {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(50)
  username      String    @unique @db.VarChar(50)
  password      String
  accountStatus Boolean   @default(true) @map("account_status")
  role          String    @db.VarChar(20)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  CreatedCustomer Customers[]
  UpdatedCustomer Customers[] @relation("UpdatedByUser")

  CreatedSupplier Suppliers[]
  UpdatedSupplier Suppliers[] @relation("UpdatedByUser")

  CreatedProduct Products[]
  UpdatedProduct Products[] @relation("UpdatedByUser")

  CreatedPurchaseOrders PurchaseOrders[]
  UpdatedPurchaseOrders PurchaseOrders[] @relation("UpdatedByUser")

  CreatedPurchaseOrderDetails PurchaseOrderDetails[]
  UpdatedPurchaseOrderDetails PurchaseOrderDetails[] @relation("UpdatedByUser")

  CreatedSalesOrders SalesOrders[]
  UpdatedSalesOrders SalesOrders[] @relation("UpdatedByUser")

  CreatedSalesOrderProductDetails SalesOrderProductDetails[]
  UpdatedSalesOrderProductDetails SalesOrderProductDetails[] @relation("UpdatedByUser")

  CreatedSalesOrderServiceDetails SalesOrderServiceDetails[]
  UpdatedSalesOrderServiceDetails SalesOrderServiceDetails[] @relation("UpdatedByUser")

  CreatedPaymentHistories PaymentHistories[]

  @@index([name, accountStatus, role], map: "users_index")
}

model Customers {
  id           String    @id @default(cuid())
  code         String    @unique @db.VarChar(20)
  name         String    @db.VarChar(100)
  licensePlate String    @map("license_plate") @db.VarChar(20)
  phoneNo      String?   @db.VarChar(20)
  address      String?   @db.VarChar(100)
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedBy    String?   @map("updated_by")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  SalesOrders SalesOrders[]

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, name, licensePlate, phoneNo, address], map: "customers_index")
}

model Suppliers {
  id               String    @id @default(cuid())
  code             String    @unique @db.VarChar(20)
  name             String    @db.VarChar(100)
  pic              String    @db.VarChar(100)
  phoneNo          String?   @db.VarChar(20)
  address          String?   @db.VarChar(100)
  remarks          String?   @db.VarChar(250)
  receivables      Int       @default(0) @db.Integer()
  receivablesLimit Int       @default(0) @db.Integer()
  createdBy        String    @map("created_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedBy        String?   @map("updated_by")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  PuchaseOrders PurchaseOrders[]

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, name, pic, phoneNo, address, receivables], map: "suppliers_index")
}

model Products {
  id               String    @id @default(cuid())
  code             String    @unique @db.VarChar(20)
  name             String    @db.VarChar(100)
  photo            String?   @db.VarChar(250)
  stock            Decimal   @default(0.00) @db.Decimal(10, 2)
  restockThreshold Decimal   @map("restock_threshold") @db.Decimal(10, 2)
  uom              String    @db.VarChar(50)
  costPrice        Decimal   @default(0) @map("cost_price") @db.Decimal(10, 2)
  costPriceCode    String    @default("") @map("cost_price_code") @db.VarChar(50)
  purchasePrice    Decimal   @map("purchase_price") @db.Decimal(10, 2)
  sellingPrice     Decimal   @map("selling_price") @db.Decimal(10, 2)
  remarks          String?   @db.VarChar(250)
  createdBy        String    @map("created_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedBy        String?   @map("updated_by")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  PurchaseOrderDetails PurchaseOrderDetails[]

  SalesOrderProductDetails SalesOrderProductDetails[]

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, name, stock, uom], map: "products_index")
}

model PurchaseOrders {
  id           String    @id @default(cuid())
  code         String    @unique @map("code") @db.VarChar(20)
  purchaseDate DateTime  @default(now()) @map("purchase_date")
  supplierId   String    @map("supplier_id")
  remarks      String?   @db.VarChar(500)
  totalItem    Int       @map("total_item") @db.Integer()
  grandTotal   Decimal   @map("grand_total") @db.Decimal(10, 2)
  status       String    @default("Dalam Proses") @db.VarChar(50)
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedBy    String?   @map("updated_by")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Supplier Suppliers @relation(fields: [supplierId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  PurchaseOrderDetails PurchaseOrderDetails[]

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, purchaseDate, supplierId, grandTotal, status], map: "purchase_orders_index")
}

model PurchaseOrderDetails {
  id            String    @id @default(cuid())
  poId          String    @map("po_id")
  productId     String    @map("product_id")
  purchasePrice Decimal   @map("purchase_price") @db.Decimal(10, 2)
  quantity      Decimal   @db.Decimal(10, 2)
  totalPrice    Decimal   @map("total_price") @db.Decimal(10, 2)
  createdBy     String    @map("created_by")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedBy     String?   @map("updated_by")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  PurchaseOrder PurchaseOrders @relation(fields: [poId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  Product Products @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model SalesOrders {
  id          String    @id @default(cuid())
  code        String    @unique @map("code") @db.VarChar(20)
  salesDate   DateTime  @default(now()) @map("sales_date")
  customerId  String    @map("customer_id")
  paymentType String    @map("payment_type") @db.VarChar(20)
  subTotal    Decimal   @map("sub_total") @db.Decimal(10, 2)
  discount    Decimal   @default(0) @db.Decimal(10, 2)
  grandTotal  Decimal   @map("grand_total") @db.Decimal(10, 2)
  remarks     String?   @db.VarChar(500)
  status      String    @default("Belum Lunas") @db.VarChar(50)
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedBy   String?   @map("updated_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  Customer Customers @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  SalesOrderProductDetails SalesOrderProductDetails[]

  SalesOrderServiceDetails SalesOrderServiceDetails[]

  PaymentHistories PaymentHistories[]

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, salesDate, customerId, paymentType, grandTotal, status], map: "sales_orders_index")
}

model SalesOrderProductDetails {
  id              String    @id @default(cuid())
  soId            String    @map("so_id")
  productId       String    @map("product_id")
  costPrice       Decimal   @map("cost_price") @db.Decimal(10, 2)
  oriSellingPrice Decimal   @map("ori_selling_price") @db.Decimal(10, 2)
  sellingPrice    Decimal   @map("selling_price") @db.Decimal(10, 2)
  quantity        Decimal   @db.Decimal(10, 2)
  totalPrice      Decimal   @map("total_price") @db.Decimal(10, 2)
  createdBy       String    @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedBy       String?   @map("updated_by")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  SalesOrder SalesOrders @relation(fields: [soId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  Product Products @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model SalesOrderServiceDetails {
  id           String    @id @default(cuid())
  soId         String    @map("so_id")
  serviceName  String    @map("service_name")
  sellingPrice Decimal   @map("selling_price") @db.Decimal(10, 2)
  quantity     Decimal   @db.Decimal(10, 2)
  totalPrice   Decimal   @map("total_price") @db.Decimal(10, 2)
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedBy    String?   @map("updated_by")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  SalesOrder SalesOrders @relation(fields: [soId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model PaymentHistories {
  id            String   @id @default(cuid())
  soId          String   @map("so_id")
  paymentDate   DateTime @default(now()) @map("payment_date")
  paymentMethod String   @map("payment_method") @db.VarChar(20)
  amount        Decimal  @db.Decimal(10, 2)
  createdBy     String   @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at")

  SalesOrder SalesOrders @relation(fields: [soId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)
}
