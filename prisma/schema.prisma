generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Users {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(50)
  username      String    @unique @db.VarChar(50)
  password      String
  accountStatus Boolean   @default(true) @map("account_status")
  role          String    @db.VarChar(20)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  CreatedCustomer Customers[]
  UpdatedCustomer Customers[] @relation("UpdatedByUser")

  CreatedSupplier Suppliers[]
  UpdatedSupplier Suppliers[] @relation("UpdatedByUser")

  CreatedProduct Products[]
  UpdatedProduct Products[] @relation("UpdatedByUser")

  CreatedPurchaseOrders PurchaseOrders[]
  UpdatedPurchaseOrders PurchaseOrders[] @relation("UpdatedByUser")

  CreatedSalesOrders SalesOrders[]
  UpdatedSalesOrders SalesOrders[] @relation("UpdatedByUser")

  @@index([name, accountStatus, role], map: "users_index")
}

model Customers {
  id           String    @id @default(cuid())
  code         String    @unique @db.VarChar(20)
  name         String    @db.VarChar(100)
  licensePlate String    @map("license_plate") @db.VarChar(20)
  phoneNo      String?   @db.VarChar(20)
  address      String?   @db.VarChar(100)
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedBy    String?   @map("updated_by")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  SalesOrders SalesOrders[]

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, name, licensePlate, phoneNo, address], map: "customers_index")
}

model Suppliers {
  id               String    @id @default(cuid())
  code             String    @unique @db.VarChar(20)
  name             String    @db.VarChar(100)
  pic              String    @db.VarChar(100)
  phoneNo          String?   @db.VarChar(20)
  address          String?   @db.VarChar(100)
  remarks          String?   @db.VarChar(250)
  receivables      Int       @default(0) @db.Integer()
  receivablesLimit Int       @default(0) @db.Integer()
  createdBy        String    @map("created_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedBy        String?   @map("updated_by")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  PuchaseOrders PurchaseOrders[]

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, name, pic, phoneNo, address, receivables], map: "suppliers_index")
}

model Products {
  id               String    @id @default(cuid())
  code             String    @unique @db.VarChar(20)
  name             String    @db.VarChar(100)
  photo            String?   @db.VarChar(250)
  stock            Decimal   @default(0.00) @db.Decimal(10, 2)
  restockThreshold Decimal   @map("restock_threshold") @db.Decimal(10, 2)
  uom              String    @db.VarChar(50)
  costPrice        Int       @default(0) @map("cost_price") @db.Integer()
  costPriceCode    String    @default("") @map("cost_price_code") @db.VarChar(50)
  purchasePrice    Int       @map("purchase_price") @db.Integer()
  sellingPrice     Int       @map("selling_price") @db.Integer()
  remarks          String?   @db.VarChar(250)
  createdBy        String    @map("created_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedBy        String?   @map("updated_by")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, name, stock, uom], map: "products_index")
}

model PurchaseOrders {
  id           String    @id @default(cuid())
  code         String    @unique @map("code") @db.VarChar(20)
  purchaseDate DateTime  @default(now()) @map("purchase_date")
  supplierId   String    @map("supplier_id")
  remarks      String?   @db.VarChar(250)
  totalItem    Int       @map("total_item") @db.Integer()
  totalPrice   Int       @map("total_price") @db.Integer()
  status       String    @default("Dalam Proses") @db.VarChar(50)
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedBy    String?   @map("updated_by")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Supplier Suppliers @relation(fields: [supplierId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, purchaseDate, supplierId, totalPrice, status], map: "purchase_orders_index")
}

model SalesOrders {
  id            String    @id @default(cuid())
  code          String    @unique @map("code") @db.VarChar(20)
  salesDate     DateTime  @default(now()) @map("sales_date")
  customerId    String    @map("customer_id")
  paymentType   String    @map("payment_type") @db.VarChar(20)
  paymentMethod String    @map("payment_method") @db.VarChar(20)
  subTotal      Int       @map("sub_total") @db.Integer()
  discount      Int       @default(0) @db.Integer()
  grandTotal    Int       @map("grand_total") @db.Integer()
  paidAmount    Int       @map("paid_amount") @db.Integer()
  remarks       String?   @db.VarChar(250)
  status        String    @default("Dalam Proses") @db.VarChar(50)
  createdBy     String    @map("created_by")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedBy     String?   @map("updated_by")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  Customer Customers @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  CreatedBy Users @relation(fields: [createdBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  UpdatedBy Users? @relation("UpdatedByUser", fields: [updatedBy], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([code, salesDate, customerId, paymentType, paymentMethod, grandTotal, status], map: "sales_orders_index")
}
